server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: ${CONTEXT_PATH:}

spring:
  application.name: ${APPLICATION_NAME:example-app}

  banner:
    location: classpath:banner.txt

  flyway:
    enabled: ${FLYWAY_ENABLE:true}
    baseline-on-migrate: ${FLYWAY_BASELINE_ON_MIGRATE:true}
    validate-on-migrate: ${FLYWAY_VALIDATE_ON_MIGRATE:true}
    locations: classpath:db/migration

  datasource:
    url: ${DB_URL:jdbc:postgresql://localhost:5432/boilerplate}
    username: ${DB_USERNAME:user}
    password: ${DB_PASSWORD:password}
    driver-class-name: ${DB_DRIVER:org.postgresql.Driver}
    hikari:
      minimum-idle: ${HIKARI_MIN_POOL:10}
      maximum-pool-size: ${HIKARI_MAX_POOL:25}
      connection-timeout: ${HIKARI_CONNECTION_TIMEOUT:5000}
      idle-timeout: ${HIKARI_IDLE_TIMEOUT:60000}
      max-lifetime: ${HIKARI_MAX_LIFETIME:300000}

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    generate-ddl: false
    show-sql: ${JPA_SHOW_SQL:true}
    hibernate:
      ddl-auto: none
    properties:
      hibernate.format_sql: ${HIBERNATE_FORMAT_SQL:true}

  jackson:
    default-property-inclusion: non_null
    serialization:
      fail-on-empty-beans: false

logging:
  level:
    root: ${ROOT_LOG_LEVEL:INFO}
    org.springframework: ${SPRING_LOG_LEVEL:INFO}
    org.hibernate: ${HIBERNATE_LOG_LEVEL:WARN}
    com.nantaaditya: ${APP_LOG_LEVEL:INFO}
  file.path: ${LOG_PATH:.logs/}
  pattern:
    console: '%d{yyyy-MM-dd HH:mm:ss.SSS} --- [%green(${spring.application.name:-})] [%-10thread] %highlight(%-5level) | requestId: [%cyan(%X{reqId:-})] - trace: [%X{traceId:-}-%X{spanId:-}] | %yellow(%logger{36}) : %msg%n'

management:
  server.port: ${ACTUATOR_PORT:1001}
  endpoint:
    shutdown.access: ${ACTUATOR_SHUTDOWN:none}
  endpoints:
    web:
      exposure.include: ${ACTUATOR_EXPOSED:*}
  tracing:
    baggage:
      correlation:
        fields: ${TRACING_CORRELATION_FIELDS:requestId}
      local-fields: ${TRACING_LOCAL_FIELDS:requestId}
      remote-fields: ${TRACING_REMOTE_FIELDS:requestId}

apps:
  async.configurations:
    default:
      core-pool-size: ${ASYNC_DEFAULT_CORE_POOL_SIZE:5}
      max-pool-size: ${ASYNC_DEFAULT_MAX_POOL_SIZE:10}
      queue-capacity: ${ASYNC_DEFAULT_QUEUE:50}
      keep-alive-seconds: ${ASYNC_DEFAULT_KEEP_ALIVE:60}
      thread-name-prefix: ${ASYNC_DEFAULT_THREAD_NAME:async-}
  log:
    enable-trace-log: ${ENABLE_TRACE_LOG:true}
    ignored-trace-log-path: ${IGNORED_TRACE_LOG_PATH:*/swagger-ui,*/swagger-ui/*,*/v3/api-docs,*/v3/api-docs/*}
    sensitive-field: ${SENSITIVE_FIELDS:x-client-id}
  swagger:
    host: ${SWAGGER_HOST:http://localhost}
  retry.configurations:
    default:
      type: ${DEFAULT_RETRY_TYPE:EXPONENTIAL_RANDOM}
      initial-interval: ${DEFAULT_RETRY_INITIAL_INTERVAL:1500}
      multiplier: ${DEFAULT_RETRY_MULTIPLIER:2.0}
      max-interval: ${DEFAULT_RETRY_MAX_INTERVAL:12000}
      max-attempt: ${DEFAULT_RETRY_MAX_ATTEMPT:3}
      retryable-exceptions: ${DEFAULT_RETRY_EXCEPTIONS:java.lang.IllegalArgumentException:true}
  client:
    pooling:
      maxTotal: ${DEFAULT_CLIENT_MAX_IDLE_CONNECTIONS:20}
      maxPerRoute: ${DEFAULT_CLIENT_MAX_IDLE_CONNECTION_PER_ROUTE:5}
    configurations:
      mock:
        host: ${MOCK_CLIENT_HOST:https://jsonplaceholder.typicode.com}
        timeOut:
          connectTimeOut: ${MOCK_CLIENT_CONNECT_TIMEOUT:2000}
          readTimeOut: ${MOCK_CLIENT_READ_TIMEOUT:2000}
          connectRequestTimeOut: ${MOCK_CLIENT_CONNECT_REQUEST_TIMEOUT:2000}
        enable-log: true
        disable-ssl-verification: true

